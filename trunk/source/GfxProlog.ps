%%BeginResource: procset Oberon
51 dict begin

% abbreviations for common operators/operator combinations
/bd {bind def} bind def
/cc {concat} bd
/clnp {clip newpath} bd
/eoclnp {eoclip newpath} bd
/cp {closepath} bd
/ct {curveto} bd
/ctm {matrix currentmatrix} bd
/ff {findfont} bd
/fsf {findfont setfont} bd
/gr {grestore} bd
/gs {gsave} bd
/im {defctm setmatrix} bd
/imask {imagemask} bd
/ln {lineto} bd
/msf {makefont setfont} bd
/mt {moveto} bd
/mts {moveto show} bd
/np {newpath} bd
/sc {scale} bd
/sd {setdash} bd
/sg {setgray} bd
/slc {setlinecap} bd
/slf {selectfont} bd
/slj {setlinejoin} bd
/slw {setlinewidth} bd
/sm {setmatrix} bd
/sml {setmiterlimit} bd
/spat {Patterns exch get setpattern} bd
/srgb {setrgbcolor} bd
/ssf {scalefont setfont} bd
/tr {translate} bd

% n rh string - read n hex bytes from currentfile
/rh {currentfile exch string readhexstring pop} bd

% rld string - run-length decode next byte from currentfile
/rld {
 1 dict begin
  /ch 1 rh 0 get def
  ch 128 lt {
   ch 1 add rh
  } if
  ch 128 gt {
   257 ch sub string
   /ch 1 rh 0 get def
   0 1 2 index length 1 sub {1 index exch ch put} for
  } if
 end
} bd

% rf file - return ascii decoder stream
/rf {currentfile /ASCIIHexDecode filter} bd

% rlf file - return run-length decoding ascii decoder stream
/rlf {currentfile /ASCIIHexDecode filter /RunLengthDecode filter} bd

/PictDict 7 dict dup begin
  /ImageType 1 def
  /BitsPerComponent 8 def
  /Decode [0 255] def
  /ImageMatrix matrix def
end def

% width height palstring datasrc pict - render 8bit indexed picture
/pict {
  gsave
    PictDict begin
      /DataSource exch def
      [/Indexed /DeviceRGB 255 <>] dup 3 4 3 roll put setcolorspace
      /Height exch def
      /Width exch def
      PictDict image
    end
  grestore
} bd

% width height datasrc img - render grayscale image with 8 bits per sample
/img {
  8 exch matrix exch image
} bd

% width height datasrc colimg - render RGB image with 3x8bits per sample
/colimg {
  8 exch matrix
  exch false 3 colorimage
} bd

% fontdict charname buildglyph - render Oberon bitmap character
/buildglyph {	% fontdict charname
    exch /CharData get exch	% CharData charname
    2 copy known not {pop /.notdef} if	% CharData charname
    get aload pop	% .... h
    dup 0 eq
    {	% dx dy 0
    	0 0 0 setcachedevice
    }
    {	% {..} dx dy x y w h
    	4 copy true 12 5 roll	% x y w h true {..} dx dy x y w h
    	exch 3 index add	% x y w h true {..} dx dy x y h x+w
    	exch 2 index add	% x y w h true {..} dx dy x y x+w y+h
    	setcachedevice	% x y w h true {..}
    	6 4 roll matrix	% w h true <..> x y [1 0 0 1 0 0]
    	dup 5 4 3 roll neg put
    	dup 4 4 3 roll neg put	% w h true <..> [1 0 0 1 -x -y]
    	exch imagemask
    } ifelse
} bd

% compatibility code
/buildchar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
} bd

% OberonEncoding array - push Oberon encoding vector
/OberonEncoding 256 array
0 1 255 {1 index exch /.notdef put } for
dup 32 /space put
dup 33 /exclam put
dup 34 /quotedbl put
dup 35 /numbersign put
dup 36 /dollar put
dup 37 /percent put
dup 38 /ampersand put
dup 39 /quotesingle put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 43 /plus put
dup 44 /comma put
dup 45 /minus put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 60 /less put
dup 61 /equal put
dup 62 /greater put
dup 63 /question put
dup 64 /at put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /bracketleft put
dup 92 /backslash put
dup 93 /bracketright put
dup 94 /arrowup put
dup 95 /underscore put
dup 96 /grave put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /braceleft put
dup 124 /bar put
dup 125 /braceright put
dup 126 /tilde put
dup 128 /Adieresis put
dup 129 /Odieresis put
dup 130 /Udieresis put
dup 131 /adieresis put
dup 132 /odieresis put
dup 133 /udieresis put
dup 134 /acircumflex put
dup 135 /ecircumflex put
dup 136 /icircumflex put
dup 137 /oicircumflex put
dup 138 /uicircumflex put
dup 139 /agrave put
dup 140 /egrave put
dup 141 /igrave put
dup 142 /ograve put
dup 143 /ugrave put
dup 144 /eacute put
dup 145 /edieresis put
dup 146 /idieresis put
dup 147 /ccedilla put
dup 148 /aacute put
dup 149 /ntilde put
dup 155 /endash put
dup 159 /hyphen put
dup 171 /germandbls put
readonly def

%%EndResource
